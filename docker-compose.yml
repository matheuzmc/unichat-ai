version: '3.8'

services:
  db:
    image: postgres:14
    container_name: unichat-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=unichat
      - POSTGRES_USER=unichat_user
      - POSTGRES_PASSWORD=unichat_password
    ports:
      - "5432:5432"
    restart: always
    networks:
      - unichat-network
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U unichat_user -d unichat"]
       interval: 5s
       timeout: 5s
       retries: 5

  backend:
    build: ./backend
    container_name: unichat-backend
    user: "${UID}:${GID}"
    volumes:
      - ./backend:/app
    environment:
      - POSTGRES_DB=unichat
      - POSTGRES_USER=unichat_user
      - POSTGRES_PASSWORD=unichat_password
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - DJANGO_SECRET_KEY=insecure-dev-key-do-not-use-in-production
      - DJANGO_DEBUG=True
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - unichat-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  llm:
    build: ./llm
    container_name: unichat-llm
    user: "${UID}:${GID}"  # Mantenha esta linha
    volumes:
      - ./llm:/app
    ports:
      - "8080:8080"
    environment:
      - LLM_MODEL_PATH=/app/models/model.bin
    restart: always
    networks:
      - unichat-network
    
  frontend:
    build: ./frontend
    container_name: unichat-frontend
    user: "${UID}:${GID}"  # Mantenha esta linha
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    restart: always
    networks:
      - unichat-network
      
networks:
  unichat-network:
    driver: bridge

volumes:
  postgres_data: